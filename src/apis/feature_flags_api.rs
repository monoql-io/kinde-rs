/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`create_feature_flag`]
#[derive(Clone, Debug)]
pub struct CreateFeatureFlagParams {
    /// Flag details.
    pub create_feature_flag_request: crate::models::CreateFeatureFlagRequest
}

/// struct for passing parameters to the method [`delete_feature_flag`]
#[derive(Clone, Debug)]
pub struct DeleteFeatureFlagParams {
    /// The identifier for the feature flag.
    pub feature_flag_key: String
}

/// struct for passing parameters to the method [`update_feature_flag`]
#[derive(Clone, Debug)]
pub struct UpdateFeatureFlagParams {
    /// The key identifier for the feature flag.
    pub feature_flag_key: String,
    /// The name of the flag.
    pub name: String,
    /// Description of the flag purpose.
    pub description: String,
    /// The variable type
    pub r#type: String,
    /// Allow the flag to be overridden at a different level.
    pub allow_override_level: String,
    /// Default value for the flag used by environments and organizations.
    pub default_value: String
}


/// struct for typed errors of method [`create_feature_flag`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateFeatureFlagError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_feature_flag`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteFeatureFlagError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_feature_flag`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateFeatureFlagError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}


/// Create feature flag.
pub async fn create_feature_flag(configuration: &configuration::Configuration, params: CreateFeatureFlagParams) -> Result<crate::models::SuccessResponse, Error<CreateFeatureFlagError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_feature_flag_request = params.create_feature_flag_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/feature_flags", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_feature_flag_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateFeatureFlagError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete feature flag
pub async fn delete_feature_flag(configuration: &configuration::Configuration, params: DeleteFeatureFlagParams) -> Result<crate::models::SuccessResponse, Error<DeleteFeatureFlagError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let feature_flag_key = params.feature_flag_key;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/feature_flags/{feature_flag_key}", local_var_configuration.base_path, feature_flag_key=crate::apis::urlencode(feature_flag_key));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteFeatureFlagError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update feature flag.
pub async fn update_feature_flag(configuration: &configuration::Configuration, params: UpdateFeatureFlagParams) -> Result<crate::models::SuccessResponse, Error<UpdateFeatureFlagError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let feature_flag_key = params.feature_flag_key;
    let name = params.name;
    let description = params.description;
    let r#type = params.r#type;
    let allow_override_level = params.allow_override_level;
    let default_value = params.default_value;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/feature_flags/{feature_flag_key}", local_var_configuration.base_path, feature_flag_key=crate::apis::urlencode(feature_flag_key));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("name", &name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("description", &description.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("type", &r#type.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("allow_override_level", &allow_override_level.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("default_value", &default_value.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateFeatureFlagError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

