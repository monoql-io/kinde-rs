/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`add_organization_users`]
#[derive(Clone, Debug)]
pub struct AddOrganizationUsersParams {
    /// The organization's code.
    pub org_code: String,
    pub add_organization_users_request: Option<crate::models::AddOrganizationUsersRequest>
}

/// struct for passing parameters to the method [`create_organization`]
#[derive(Clone, Debug)]
pub struct CreateOrganizationParams {
    /// Organization details.
    pub create_organization_request: Option<crate::models::CreateOrganizationRequest>
}

/// struct for passing parameters to the method [`create_organization_user_permission`]
#[derive(Clone, Debug)]
pub struct CreateOrganizationUserPermissionParams {
    /// The organization's code.
    pub org_code: String,
    /// The user's id.
    pub user_id: String,
    /// Permission details.
    pub create_organization_user_permission_request: crate::models::CreateOrganizationUserPermissionRequest
}

/// struct for passing parameters to the method [`create_organization_user_role`]
#[derive(Clone, Debug)]
pub struct CreateOrganizationUserRoleParams {
    /// The organization's code.
    pub org_code: String,
    /// The user's id.
    pub user_id: String,
    /// Role details.
    pub create_organization_user_role_request: crate::models::CreateOrganizationUserRoleRequest
}

/// struct for passing parameters to the method [`delete_organization`]
#[derive(Clone, Debug)]
pub struct DeleteOrganizationParams {
    /// The identifier for the organization.
    pub org_code: String
}

/// struct for passing parameters to the method [`delete_organization_feature_flag_override`]
#[derive(Clone, Debug)]
pub struct DeleteOrganizationFeatureFlagOverrideParams {
    /// The identifier for the organization.
    pub org_code: String,
    /// The identifier for the feature flag.
    pub feature_flag_key: String
}

/// struct for passing parameters to the method [`delete_organization_feature_flag_overrides`]
#[derive(Clone, Debug)]
pub struct DeleteOrganizationFeatureFlagOverridesParams {
    /// The identifier for the organization.
    pub org_code: String
}

/// struct for passing parameters to the method [`delete_organization_user_permission`]
#[derive(Clone, Debug)]
pub struct DeleteOrganizationUserPermissionParams {
    /// The organization's code.
    pub org_code: String,
    /// The user's id.
    pub user_id: String,
    /// The permission id.
    pub permission_id: String
}

/// struct for passing parameters to the method [`delete_organization_user_role`]
#[derive(Clone, Debug)]
pub struct DeleteOrganizationUserRoleParams {
    /// The organization's code.
    pub org_code: String,
    /// The user's id.
    pub user_id: String,
    /// The role id.
    pub role_id: String
}

/// struct for passing parameters to the method [`get_organization`]
#[derive(Clone, Debug)]
pub struct GetOrganizationParams {
    /// The organization's code.
    pub code: Option<String>
}

/// struct for passing parameters to the method [`get_organization_feature_flags`]
#[derive(Clone, Debug)]
pub struct GetOrganizationFeatureFlagsParams {
    /// The identifier for the organization.
    pub org_code: String
}

/// struct for passing parameters to the method [`get_organization_user_permissions`]
#[derive(Clone, Debug)]
pub struct GetOrganizationUserPermissionsParams {
    /// The organization's code.
    pub org_code: String,
    /// The user's id.
    pub user_id: String,
    /// Specify additional data to retrieve. Use \"roles\".
    pub expand: Option<String>
}

/// struct for passing parameters to the method [`get_organization_user_roles`]
#[derive(Clone, Debug)]
pub struct GetOrganizationUserRolesParams {
    /// The organization's code.
    pub org_code: String,
    /// The user's id.
    pub user_id: String
}

/// struct for passing parameters to the method [`get_organization_users`]
#[derive(Clone, Debug)]
pub struct GetOrganizationUsersParams {
    /// The organization's code.
    pub org_code: String,
    /// Field and order to sort the result by.
    pub sort: Option<String>,
    /// Number of results per page. Defaults to 10 if parameter not sent.
    pub page_size: Option<i32>,
    /// A string to get the next page of results if there are more results.
    pub next_token: Option<String>,
    /// Filter by user permissions comma separated (where all match)
    pub permissions: Option<String>,
    /// Filter by user roles comma separated (where all match)
    pub roles: Option<String>
}

/// struct for passing parameters to the method [`get_organizations`]
#[derive(Clone, Debug)]
pub struct GetOrganizationsParams {
    /// Field and order to sort the result by.
    pub sort: Option<String>,
    /// Number of results per page. Defaults to 10 if parameter not sent.
    pub page_size: Option<i32>,
    /// A string to get the next page of results if there are more results.
    pub next_token: Option<String>
}

/// struct for passing parameters to the method [`remove_organization_user`]
#[derive(Clone, Debug)]
pub struct RemoveOrganizationUserParams {
    /// The organization's code.
    pub org_code: String,
    /// The user's id.
    pub user_id: String
}

/// struct for passing parameters to the method [`update_organization`]
#[derive(Clone, Debug)]
pub struct UpdateOrganizationParams {
    /// The identifier for the organization.
    pub org_code: String,
    /// Organization details.
    pub update_organization_request: Option<crate::models::UpdateOrganizationRequest>
}

/// struct for passing parameters to the method [`update_organization_feature_flag_override`]
#[derive(Clone, Debug)]
pub struct UpdateOrganizationFeatureFlagOverrideParams {
    /// The identifier for the organization
    pub org_code: String,
    /// The identifier for the feature flag
    pub feature_flag_key: String,
    /// Override value
    pub value: String
}

/// struct for passing parameters to the method [`update_organization_users`]
#[derive(Clone, Debug)]
pub struct UpdateOrganizationUsersParams {
    /// The organization's code.
    pub org_code: String,
    pub update_organization_users_request: Option<crate::models::UpdateOrganizationUsersRequest>
}


/// struct for typed errors of method [`add_organization_users`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddOrganizationUsersError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateOrganizationError {
    Status403(),
    Status400(crate::models::ErrorResponse),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_organization_user_permission`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateOrganizationUserPermissionError {
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_organization_user_role`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateOrganizationUserRoleError {
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOrganizationError {
    Status403(),
    Status400(crate::models::ErrorResponse),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_organization_feature_flag_override`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOrganizationFeatureFlagOverrideError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_organization_feature_flag_overrides`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOrganizationFeatureFlagOverridesError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_organization_user_permission`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOrganizationUserPermissionError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_organization_user_role`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOrganizationUserRoleError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_organization_feature_flags`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationFeatureFlagsError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_organization_user_permissions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationUserPermissionsError {
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_organization_user_roles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationUserRolesError {
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_organization_users`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationUsersError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_organizations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationsError {
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`remove_organization_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveOrganizationUserError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateOrganizationError {
    Status403(),
    Status400(crate::models::ErrorResponse),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_organization_feature_flag_override`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateOrganizationFeatureFlagOverrideError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_organization_users`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateOrganizationUsersError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}


/// Add existing users to an organization.
pub async fn add_organization_users(configuration: &configuration::Configuration, params: AddOrganizationUsersParams) -> Result<crate::models::AddOrganizationUsersResponse, Error<AddOrganizationUsersError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;
    let add_organization_users_request = params.add_organization_users_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/users", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&add_organization_users_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddOrganizationUsersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create an organization.
pub async fn create_organization(configuration: &configuration::Configuration, params: CreateOrganizationParams) -> Result<crate::models::CreateOrganizationResponse, Error<CreateOrganizationError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_organization_request = params.create_organization_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organization", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_organization_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateOrganizationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Add permission to an organization user.
pub async fn create_organization_user_permission(configuration: &configuration::Configuration, params: CreateOrganizationUserPermissionParams) -> Result<crate::models::SuccessResponse, Error<CreateOrganizationUserPermissionError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;
    let user_id = params.user_id;
    let create_organization_user_permission_request = params.create_organization_user_permission_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/users/{user_id}/permissions", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code), user_id=crate::apis::urlencode(user_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_organization_user_permission_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateOrganizationUserPermissionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Add role to an organization user.
pub async fn create_organization_user_role(configuration: &configuration::Configuration, params: CreateOrganizationUserRoleParams) -> Result<crate::models::SuccessResponse, Error<CreateOrganizationUserRoleError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;
    let user_id = params.user_id;
    let create_organization_user_role_request = params.create_organization_user_role_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/users/{user_id}/roles", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code), user_id=crate::apis::urlencode(user_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_organization_user_role_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateOrganizationUserRoleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete an organization.
pub async fn delete_organization(configuration: &configuration::Configuration, params: DeleteOrganizationParams) -> Result<(), Error<DeleteOrganizationError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organization/{org_code}", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteOrganizationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete organization feature flag override.
pub async fn delete_organization_feature_flag_override(configuration: &configuration::Configuration, params: DeleteOrganizationFeatureFlagOverrideParams) -> Result<crate::models::SuccessResponse, Error<DeleteOrganizationFeatureFlagOverrideError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;
    let feature_flag_key = params.feature_flag_key;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code), feature_flag_key=crate::apis::urlencode(feature_flag_key));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteOrganizationFeatureFlagOverrideError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete all organization feature flag overrides.
pub async fn delete_organization_feature_flag_overrides(configuration: &configuration::Configuration, params: DeleteOrganizationFeatureFlagOverridesParams) -> Result<crate::models::SuccessResponse, Error<DeleteOrganizationFeatureFlagOverridesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/feature_flags", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteOrganizationFeatureFlagOverridesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete permission for an organization user.
pub async fn delete_organization_user_permission(configuration: &configuration::Configuration, params: DeleteOrganizationUserPermissionParams) -> Result<crate::models::SuccessResponse, Error<DeleteOrganizationUserPermissionError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;
    let user_id = params.user_id;
    let permission_id = params.permission_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/users/{user_id}/permissions/{permission_id}", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code), user_id=crate::apis::urlencode(user_id), permission_id=crate::apis::urlencode(permission_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteOrganizationUserPermissionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete role for an organization user.
pub async fn delete_organization_user_role(configuration: &configuration::Configuration, params: DeleteOrganizationUserRoleParams) -> Result<crate::models::SuccessResponse, Error<DeleteOrganizationUserRoleError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;
    let user_id = params.user_id;
    let role_id = params.role_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code), user_id=crate::apis::urlencode(user_id), role_id=crate::apis::urlencode(role_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteOrganizationUserRoleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets an organization given the organization's code. 
pub async fn get_organization(configuration: &configuration::Configuration, params: GetOrganizationParams) -> Result<crate::models::Organization, Error<GetOrganizationError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let code = params.code;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organization", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = code {
        local_var_req_builder = local_var_req_builder.query(&[("code", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetOrganizationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get all organization feature flags.
pub async fn get_organization_feature_flags(configuration: &configuration::Configuration, params: GetOrganizationFeatureFlagsParams) -> Result<crate::models::GetOrganizationFeatureFlagsResponse, Error<GetOrganizationFeatureFlagsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/feature_flags", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetOrganizationFeatureFlagsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get permissions for an organization user.
pub async fn get_organization_user_permissions(configuration: &configuration::Configuration, params: GetOrganizationUserPermissionsParams) -> Result<crate::models::GetOrganizationsUserPermissionsResponse, Error<GetOrganizationUserPermissionsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;
    let user_id = params.user_id;
    let expand = params.expand;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/users/{user_id}/permissions", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code), user_id=crate::apis::urlencode(user_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = expand {
        local_var_req_builder = local_var_req_builder.query(&[("expand", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetOrganizationUserPermissionsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get roles for an organization user.
pub async fn get_organization_user_roles(configuration: &configuration::Configuration, params: GetOrganizationUserRolesParams) -> Result<crate::models::GetOrganizationsUserRolesResponse, Error<GetOrganizationUserRolesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;
    let user_id = params.user_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/users/{user_id}/roles", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code), user_id=crate::apis::urlencode(user_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetOrganizationUserRolesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get users in an organization.
pub async fn get_organization_users(configuration: &configuration::Configuration, params: GetOrganizationUsersParams) -> Result<crate::models::GetOrganizationUsersResponse, Error<GetOrganizationUsersError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;
    let sort = params.sort;
    let page_size = params.page_size;
    let next_token = params.next_token;
    let permissions = params.permissions;
    let roles = params.roles;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/users", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder = local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = permissions {
        local_var_req_builder = local_var_req_builder.query(&[("permissions", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = roles {
        local_var_req_builder = local_var_req_builder.query(&[("roles", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetOrganizationUsersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a list of organizations. 
pub async fn get_organizations(configuration: &configuration::Configuration, params: GetOrganizationsParams) -> Result<crate::models::GetOrganizationsResponse, Error<GetOrganizationsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sort = params.sort;
    let page_size = params.page_size;
    let next_token = params.next_token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder = local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetOrganizationsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove user from an organization.
pub async fn remove_organization_user(configuration: &configuration::Configuration, params: RemoveOrganizationUserParams) -> Result<crate::models::SuccessResponse, Error<RemoveOrganizationUserError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;
    let user_id = params.user_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/users/{user_id}", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code), user_id=crate::apis::urlencode(user_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RemoveOrganizationUserError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update an organization.
pub async fn update_organization(configuration: &configuration::Configuration, params: UpdateOrganizationParams) -> Result<crate::models::SuccessResponse, Error<UpdateOrganizationError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;
    let update_organization_request = params.update_organization_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organization/{org_code}", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&update_organization_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateOrganizationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update organization feature flag override.
pub async fn update_organization_feature_flag_override(configuration: &configuration::Configuration, params: UpdateOrganizationFeatureFlagOverrideParams) -> Result<crate::models::SuccessResponse, Error<UpdateOrganizationFeatureFlagOverrideError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;
    let feature_flag_key = params.feature_flag_key;
    let value = params.value;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code), feature_flag_key=crate::apis::urlencode(feature_flag_key));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("value", &value.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateOrganizationFeatureFlagOverrideError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update users that belong to an organization.
pub async fn update_organization_users(configuration: &configuration::Configuration, params: UpdateOrganizationUsersParams) -> Result<crate::models::UpdateOrganizationUsersResponse, Error<UpdateOrganizationUsersError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org_code = params.org_code;
    let update_organization_users_request = params.update_organization_users_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/organizations/{org_code}/users", local_var_configuration.base_path, org_code=crate::apis::urlencode(org_code));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&update_organization_users_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateOrganizationUsersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

