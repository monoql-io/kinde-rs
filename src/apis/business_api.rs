/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_business`]
#[derive(Clone, Debug)]
pub struct GetBusinessParams {
    /// Business code.
    pub code: String,
    /// Business name.
    pub name: String,
    /// Email associated with business.
    pub email: String,
    /// Phone number associated with business.
    pub phone: Option<String>,
    /// The industry your business is in.
    pub industry: Option<String>,
    /// The timezone your business is in.
    pub timezone: Option<String>,
    /// Your Privacy policy URL.
    pub privacy_url: Option<String>,
    /// Your Terms and Conditions URL.
    pub terms_url: Option<String>
}

/// struct for passing parameters to the method [`update_business`]
#[derive(Clone, Debug)]
pub struct UpdateBusinessParams {
    /// Business name.
    pub business_name: String,
    /// Email associated with business.
    pub primary_email: String,
    /// Phone number associated with business.
    pub primary_phone: Option<String>,
    /// The key of the industry your business is in.
    pub industry_key: Option<String>,
    /// The ID of the timezone your business is in.
    pub timezone_id: Option<String>,
    /// Your Privacy policy URL.
    pub privacy_url: Option<String>,
    /// Your Terms and Conditions URL.
    pub terms_url: Option<String>,
    /// Display \"Powered by Kinde\" on your sign up, sign in, and subscription pages.
    pub is_show_kinde_branding: Option<String>,
    /// Show a policy acceptance checkbox on sign up.
    pub is_click_wrap: Option<bool>,
    /// Your Kinde Perk code.
    pub partner_code: Option<String>
}


/// struct for typed errors of method [`get_business`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBusinessError {
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_business`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateBusinessError {
    Status400(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}


/// Get your business details.
pub async fn get_business(configuration: &configuration::Configuration, params: GetBusinessParams) -> Result<crate::models::SuccessResponse, Error<GetBusinessError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let code = params.code;
    let name = params.name;
    let email = params.email;
    let phone = params.phone;
    let industry = params.industry;
    let timezone = params.timezone;
    let privacy_url = params.privacy_url;
    let terms_url = params.terms_url;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/business", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("code", &code.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("name", &name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("email", &email.to_string())]);
    if let Some(ref local_var_str) = phone {
        local_var_req_builder = local_var_req_builder.query(&[("phone", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = industry {
        local_var_req_builder = local_var_req_builder.query(&[("industry", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = timezone {
        local_var_req_builder = local_var_req_builder.query(&[("timezone", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = privacy_url {
        local_var_req_builder = local_var_req_builder.query(&[("privacy_url", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = terms_url {
        local_var_req_builder = local_var_req_builder.query(&[("terms_url", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBusinessError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update business details.
pub async fn update_business(configuration: &configuration::Configuration, params: UpdateBusinessParams) -> Result<crate::models::SuccessResponse, Error<UpdateBusinessError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let business_name = params.business_name;
    let primary_email = params.primary_email;
    let primary_phone = params.primary_phone;
    let industry_key = params.industry_key;
    let timezone_id = params.timezone_id;
    let privacy_url = params.privacy_url;
    let terms_url = params.terms_url;
    let is_show_kinde_branding = params.is_show_kinde_branding;
    let is_click_wrap = params.is_click_wrap;
    let partner_code = params.partner_code;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/business", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("business_name", &business_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("primary_email", &primary_email.to_string())]);
    if let Some(ref local_var_str) = primary_phone {
        local_var_req_builder = local_var_req_builder.query(&[("primary_phone", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = industry_key {
        local_var_req_builder = local_var_req_builder.query(&[("industry_key", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = timezone_id {
        local_var_req_builder = local_var_req_builder.query(&[("timezone_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = privacy_url {
        local_var_req_builder = local_var_req_builder.query(&[("privacy_url", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = terms_url {
        local_var_req_builder = local_var_req_builder.query(&[("terms_url", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_show_kinde_branding {
        local_var_req_builder = local_var_req_builder.query(&[("is_show_kinde_branding", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_click_wrap {
        local_var_req_builder = local_var_req_builder.query(&[("is_click_wrap", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = partner_code {
        local_var_req_builder = local_var_req_builder.query(&[("partner_code", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateBusinessError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

