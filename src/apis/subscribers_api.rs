/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`create_subscriber`]
#[derive(Clone, Debug)]
pub struct CreateSubscriberParams {
    /// Subscriber's first name.
    pub first_name: String,
    /// Subscriber's last name.
    pub last_name: Option<String>,
    /// The email address of the subscriber.
    pub email: Option<String>
}

/// struct for passing parameters to the method [`get_subscriber`]
#[derive(Clone, Debug)]
pub struct GetSubscriberParams {
    /// The subscriber's id.
    pub subscriber_id: String
}

/// struct for passing parameters to the method [`get_subscribers`]
#[derive(Clone, Debug)]
pub struct GetSubscribersParams {
    /// Field and order to sort the result by.
    pub sort: Option<String>,
    /// Number of results per page. Defaults to 10 if parameter not sent.
    pub page_size: Option<i32>,
    /// A string to get the next page of results if there are more results.
    pub next_token: Option<String>
}


/// struct for typed errors of method [`create_subscriber`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSubscriberError {
    Status400(crate::models::ErrorResponse),
    Status403(crate::models::ErrorResponse),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_subscriber`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSubscriberError {
    Status400(crate::models::ErrorResponse),
    Status403(crate::models::ErrorResponse),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_subscribers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSubscribersError {
    Status403(crate::models::ErrorResponse),
    Status429(),
    UnknownValue(serde_json::Value),
}


/// Create subscriber.
pub async fn create_subscriber(configuration: &configuration::Configuration, params: CreateSubscriberParams) -> Result<crate::models::CreateSubscriberSuccessResponse, Error<CreateSubscriberError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let first_name = params.first_name;
    let last_name = params.last_name;
    let email = params.email;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/subscribers", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("first_name", &first_name.to_string())]);
    if let Some(ref local_var_str) = last_name {
        local_var_req_builder = local_var_req_builder.query(&[("last_name", &local_var_str.to_string())]);
    };
    if let Some(ref local_var_str) = email {
        local_var_req_builder = local_var_req_builder.query(&[("email", &local_var_str.to_string())]);
    };
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateSubscriberError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a subscriber record. 
pub async fn get_subscriber(configuration: &configuration::Configuration, params: GetSubscriberParams) -> Result<crate::models::GetSubscriberResponse, Error<GetSubscriberError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let subscriber_id = params.subscriber_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/subscribers/{subscriber_id}", local_var_configuration.base_path, subscriber_id=crate::apis::urlencode(subscriber_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSubscriberError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter. 
pub async fn get_subscribers(configuration: &configuration::Configuration, params: GetSubscribersParams) -> Result<crate::models::GetSubscribersResponse, Error<GetSubscribersError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sort = params.sort;
    let page_size = params.page_size;
    let next_token = params.next_token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/subscribers", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder = local_var_req_builder.query(&[("next_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSubscribersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

