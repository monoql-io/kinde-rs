/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_connected_app_auth_url`]
#[derive(Clone, Debug)]
pub struct GetConnectedAppAuthUrlParams {
    /// The unique key code reference of the connected app to authenticate against.
    pub key_code_ref: String,
    /// The id of the user that needs to authenticate to the third-party connected app.
    pub user_id: Option<String>,
    /// The code of the Kinde organization that needs to authenticate to the third-party connected app.
    pub org_code: Option<String>
}

/// struct for passing parameters to the method [`get_connected_app_token`]
#[derive(Clone, Debug)]
pub struct GetConnectedAppTokenParams {
    /// The unique sesssion id reprensenting the login session of a user.
    pub session_id: String
}

/// struct for passing parameters to the method [`revoke_connected_app_token`]
#[derive(Clone, Debug)]
pub struct RevokeConnectedAppTokenParams {
    /// The unique sesssion id reprensenting the login session of a user.
    pub session_id: String
}


/// struct for typed errors of method [`get_connected_app_auth_url`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetConnectedAppAuthUrlError {
    Status400(crate::models::ErrorResponse),
    Status404(crate::models::ErrorResponse),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_connected_app_token`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetConnectedAppTokenError {
    Status400(crate::models::ErrorResponse),
    Status403(crate::models::ErrorResponse),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`revoke_connected_app_token`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RevokeConnectedAppTokenError {
    Status400(crate::models::ErrorResponse),
    Status403(crate::models::ErrorResponse),
    Status405(),
    Status429(),
    UnknownValue(serde_json::Value),
}


/// Get a URL that authenticates and authorizes a user to a third-party connected app.
pub async fn get_connected_app_auth_url(configuration: &configuration::Configuration, params: GetConnectedAppAuthUrlParams) -> Result<crate::models::ConnectedAppsAuthUrl, Error<GetConnectedAppAuthUrlError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let key_code_ref = params.key_code_ref;
    let user_id = params.user_id;
    let org_code = params.org_code;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/connected_apps/auth_url", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("key_code_ref", &key_code_ref.to_string())]);
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("user_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = org_code {
        local_var_req_builder = local_var_req_builder.query(&[("org_code", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetConnectedAppAuthUrlError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get an access token that can be used to call the third-party provider linked to the connected app.
pub async fn get_connected_app_token(configuration: &configuration::Configuration, params: GetConnectedAppTokenParams) -> Result<crate::models::ConnectedAppsAccessToken, Error<GetConnectedAppTokenError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let session_id = params.session_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/connected_apps/token", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("session_id", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetConnectedAppTokenError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Revoke the tokens linked to the connected app session.
pub async fn revoke_connected_app_token(configuration: &configuration::Configuration, params: RevokeConnectedAppTokenParams) -> Result<crate::models::SuccessResponse, Error<RevokeConnectedAppTokenError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let session_id = params.session_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/connected_apps/revoke", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("session_id", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RevokeConnectedAppTokenError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

