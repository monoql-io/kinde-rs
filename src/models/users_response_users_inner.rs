/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UsersResponseUsersInner {
    /// Unique id of the user in Kinde.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// External id for user.
    #[serde(rename = "provided_id", skip_serializing_if = "Option::is_none")]
    pub provided_id: Option<String>,
    /// Default email address of the user in Kinde.
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// User's last name.
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    /// User's first name.
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    /// Whether the user is currently suspended or not.
    #[serde(rename = "is_suspended", skip_serializing_if = "Option::is_none")]
    pub is_suspended: Option<bool>,
    /// User's profile picture URL.
    #[serde(rename = "picture", skip_serializing_if = "Option::is_none")]
    pub picture: Option<String>,
    /// Total number of user sign ins.
    #[serde(rename = "total_sign_ins", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub total_sign_ins: Option<Option<i32>>,
    /// Number of consecutive failed user sign ins.
    #[serde(rename = "failed_sign_ins", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub failed_sign_ins: Option<Option<i32>>,
    /// Last sign in date in ISO 8601 format.
    #[serde(rename = "last_signed_in", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_signed_in: Option<Option<String>>,
    /// Date of user creation in ISO 8601 format.
    #[serde(rename = "created_on", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created_on: Option<Option<String>>,
    /// Array of organizations a user belongs to.
    #[serde(rename = "organizations", skip_serializing_if = "Option::is_none")]
    pub organizations: Option<Vec<String>>,
    /// Array of identities belonging to the user.
    #[serde(rename = "identities", skip_serializing_if = "Option::is_none")]
    pub identities: Option<Vec<crate::models::UserIdentitiesInner>>,
}

impl UsersResponseUsersInner {
    pub fn new() -> UsersResponseUsersInner {
        UsersResponseUsersInner {
            id: None,
            provided_id: None,
            email: None,
            last_name: None,
            first_name: None,
            is_suspended: None,
            picture: None,
            total_sign_ins: None,
            failed_sign_ins: None,
            last_signed_in: None,
            created_on: None,
            organizations: None,
            identities: None,
        }
    }
}


