/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateFeatureFlagRequest {
    /// The name of the flag.
    #[serde(rename = "name")]
    pub name: String,
    /// Description of the flag purpose.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The flag identifier to use in code.
    #[serde(rename = "key")]
    pub key: String,
    /// The variable type.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Allow the flag to be overridden at a different level.
    #[serde(rename = "allow_override_level", skip_serializing_if = "Option::is_none")]
    pub allow_override_level: Option<AllowOverrideLevel>,
    /// Default value for the flag used by environments and organizations.
    #[serde(rename = "default_value")]
    pub default_value: String,
}

impl CreateFeatureFlagRequest {
    pub fn new(name: String, key: String, r#type: Type, default_value: String) -> CreateFeatureFlagRequest {
        CreateFeatureFlagRequest {
            name,
            description: None,
            key,
            r#type,
            allow_override_level: None,
            default_value,
        }
    }
}

/// The variable type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "str")]
    Str,
    #[serde(rename = "int")]
    Int,
    #[serde(rename = "bool")]
    Bool,
}

impl Default for Type {
    fn default() -> Type {
        Self::Str
    }
}
/// Allow the flag to be overridden at a different level.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AllowOverrideLevel {
    #[serde(rename = "env")]
    Env,
    #[serde(rename = "org")]
    Org,
    #[serde(rename = "usr")]
    Usr,
}

impl Default for AllowOverrideLevel {
    fn default() -> AllowOverrideLevel {
        Self::Env
    }
}

